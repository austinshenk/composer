<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" type="text/css" href="css/reader.css">
<script type="text/javascript" src="js/reader.min.js"></script>
<script type="text/javascript">
function Story(data) {
  //Private Members
  var self = this;

  var buttons = {
    play : $("#btn-play"),
    playIcon: $("#btn-play use"),
    tempo : $("#btn-tempo"),
    settings : $("#btn-settings"),
    settingClose : $("#btn-setting-close"),
    settingSave : $("#btn-setting-save"),
    settingCancel : $("#btn-setting-cancel")
  }
  var overlay = {
    self : $("#overlay"),
    shadow : $("#overlay #shadow"),
    modal : $("#overlay #modal")
  }
  var tempoSlider = $("#input-tempo");
  var tempoSliderWrapper = $("#tempo-cont");

  var tempo = 1;
  this.Settings = {
    tempoMin : 0,
    tempoMax : 1
  }

  var StoryConstants = {
    TEMPO : {
      ATTR : "tempo",
      REGEX : /(\d?\d?\d?.?\d?\d?)/
    },
    MEASURE : {
      ATTR : "measure",
      REGEX : /(-?\d?\d?\d?\.?\d?\d?)([sSfF])([-<>~])(-?\d?\d?\d?\.?\d?\d?)/,
      PROP_LENGTH : 4
    },
    ANIMATION : {
      DISPLAY : {
        HIDE : "none",
        SHOW : "inline-block"
      },
      SLIDE : {
        AMOUNT : 100,
        DURATION_REDUCTION : .9
      }
    }
  }
  //Easing Visualizer : http://greensock.com/ease-visualizer
  var EaseTypes = {
    "-" : Power0.easeNone,
    "<" : Power4.easeIn,
    ">" : Power4.easeOut,
    "~" : Power2.easeInOut
  }
  var TweenTypes = {
    "f" : function(element, delay, easing, duration) {return [TweenLite.to(element, duration, {onStart: function(){TweenLite.set(element, {display: StoryConstants.ANIMATION.DISPLAY.SHOW})}, opacity: 1, delay: delay, ease: EaseTypes[easing]})];},
    "F" : function(element, delay, easing, duration) {return [TweenLite.to(element, duration, {opacity: 0, delay: delay, ease: EaseTypes[easing], onComplete: function(){TweenLite.set(element, {display: StoryConstants.ANIMATION.DISPLAY.HIDE})}})];},
    "s" : function(element, delay, easing, duration) {return [TweenLite.from(element, duration, {onStart: function(){TweenLite.set(element, {display: StoryConstants.ANIMATION.DISPLAY.SHOW})}, left: StoryConstants.ANIMATION.SLIDE.AMOUNT, delay: delay, ease: EaseTypes[easing]}),
                                  TweenLite.to(element, duration, {opacity: 1, delay: delay-(duration*(1-StoryConstants.ANIMATION.SLIDE.DURATION_REDUCTION)), ease: EaseTypes[easing]})];},
    "S" : function(element, delay, easing, duration) {return [TweenLite.to(element, duration*StoryConstants.ANIMATION.SLIDE.DURATION_REDUCTION, {left: StoryConstants.ANIMATION.SLIDE.AMOUNT, delay: delay, ease: EaseTypes[easing], onComplete: function(){TweenLite.set(element, {display: StoryConstants.ANIMATION.DISPLAY.HIDE})}}),
                                  TweenLite.to(element, duration, {opacity: 0, delay: delay, ease: EaseTypes[easing]})];}
  }
  var timeline = new TimelineMax({paused: true, onComplete: function() {buttons.playIcon.attr("xlink:href", "#replay")}});
  var init = function(data) {
    var root = $(data.firstChild);
      var tempoAttr = StoryConstants.TEMPO.REGEX.exec(root.attr(StoryConstants.TEMPO.ATTR));
      if (tempoAttr.length == 2) tempo = tempoAttr[1];
      timeline.timeScale(tempo);
      $("article").append(root.html());
      $("[" + StoryConstants.MEASURE.ATTR + "]").each(function() {
        measure(this)
      });
      play();
  }
  var measure = function(element) {
    var $elem = $(element);
    var measuresByElement = $elem.attr(StoryConstants.MEASURE.ATTR).split(" ");
    for (var i=0; i < measuresByElement.length; i++) {
      animateMeasure($elem, measuresByElement[i]);
    }
  }
  var animateMeasure = function(element, measure) {
    var props = StoryConstants.MEASURE.REGEX.exec(measure);
    if (props.length != StoryConstants.MEASURE.PROP_LENGTH+1) return;
    timeline.add(configureTween(element, props));
  }
  var configureTween = function(element, props) {
    return TweenTypes[props[2]](element, props[1], props[3], props[4]);
  }
  var play = function() {
    timeline.play();
    buttons.playIcon.attr("xlink:href", "#pause");
  }
  var pause = function() {
    timeline.pause();
    buttons.playIcon.attr("xlink:href", "#play");
  }
  var restart = function() {
    timeline.restart();
    buttons.playIcon.attr("xlink:href", "#pause");
  }
  var mainAction = function() {
    var isPlaying = timeline.isActive();
    var isComplete = timeline.progress() == 1;;
    if (isPlaying) {
      pause();
    } else  {
      if (!isComplete) {
        play();
      } else {
        restart();
      }
    }
  }
  var closeSettingsModal = function() {
    $('#modal').removeClass('open');
  }
  var settingsAction = function() {
    $('#modal').toggleClass('open');
  }
  var tempoAction = function() {
    buttons.tempo.parent().toggleClass('open');
  }
  var getNewSettings = function() {
    var newSettings = {};
    overlay.modal.find("input").each(function() {
      var $this = $(this);
      if ($this.attr("name")) {
        var setting = {};
        setting.value = $this.val();
        setting.format = $this.attr("format");
        setting.required = $this.attr("required");
        setting.default = $this.attr("default");
        setting.min = $this.attr("min");
        setting.max = $this.attr("max");
        newSettings[$this.attr("name")] = setting;
      }
    });
    return newSettings;
  }
  var validateSettings = function(newSettings) {
    var errorCount = 0;
    var errors = {};
    for (var setting in newSettings) {
      var settingValue = newSettings[setting];
      var errorValue = [];
      if (settingValue.required && settingValue.value == "") {
        errorValue.push(setting + " is required");
        errorCount++;
      } else if (settingValue.value == "") {
        newSettings[setting].value = settingValue.default;
      }
      if (settingValue.format) {
        if (!new RegExp(settingValue.format).test(settingValue.value)) {
          errorValue.push(setting + " does not match format " + settingValue.format);
          errorCount++;
        }
      }
      if (settingValue.min) {
        if (settingValue.value < settingValue.min) {
          errorValue.push(setting + " should be greater than " + settingValue.min);
          errorCount++;
        }
      }
      if (settingValue.max) {
        if (settingValue.value > settingValue.max) {
          errorValue.push(setting + " should be less than " + settingValue.max);
          errorCount++;
        }
      }
      if (errorValue.length > 0) {
        errors[setting] = errorValue;
      }
    }
    newSettings.errors = errors;
    console.log(newSettings);
    return errorCount == 0;
  }
  var applySettings = function(newSettings) {
    overlay.modal.find("input").each(function() {
      var $this = $(this);
      if ($this.attr("name")) {
        self.Settings[$this.attr("name")] = ($this.attr("format"))?new RegExp($this.attr("format")).exec($this.val()):$this.val();
      }
    });
  }
  var retrieveSettings = function() {
    for (var setting in self.Settings) {
      overlay.modal.find("[name="+setting+"]").val(self.Settings[setting]);
    }
  }
  var saveSettingsAction = function() {
    var newSettings = getNewSettings();
    if (validateSettings(newSettings)) {
      //applySettings(newSettings);
      closeSettingsModal();
    } else {
      console.log(newSettings.errors);
    }
  }

  //Events
  var click = "click tap";
  buttons.play.on(click, function() {
    mainAction();
  });
  buttons.settings.on(click, function() {
    settingsAction();
  });
  buttons.settingClose.on(click, function() {
    settingsAction();
  });
  overlay.shadow.on(click, function() {
    settingsAction();
  });
  buttons.settingSave.on(click, function() {
    saveSettingsAction();
  });
  buttons.settingCancel.on(click, function() {
    settingsAction();
  });
  buttons.tempo.on(click, function() {
    tempoAction();
  });

  init(data);
  return this;
}
var story;
$(document).ready(function(){
  $.ajax({
    type: 'GET',
    url: 'test.xml',
    dataType: 'xml',
    async: true,
    success: function(data){
      story = new Story(data);
    },
    error: function(xhr, type){
      alert('Story failed to load for URL: test.xml');
    }
  });
});
</script>
</head>
<body>
  <div class="hidden">
    <%- include("../partials/icons") -%>
  </div>
  <div id="article-wrapper">
    <article></article>
  </div>
  <nav am-mod="nav" am-utility="clearfix">
    <div am-mod="grid" am-size="2">
      <div id="popup-tempo" am-mod='popup' am-type='dropdown' am-anchor='bottom left' am-float>
        <button id="btn-tempo" am-popup='toggle' am-mod="button" am-align="left" title="Tempo">
          <svg am-mod="icon">
            <use xlink:href="#tempo"/>
          </svg>
        </button>
        <div am-popup='menu'>
          <input id="input-tempo" type="range" />
        </div>
      </div>
    </div>
    <div am-mod="grid" am-size="8">
      <button id="btn-play" am-mod="button" am-align="center" am-type="primary">
        <svg am-mod="icon">
          <use xlink:href="#play"/>
        </svg>
      </button>
    </div>
    <div am-mod="grid" am-size="2">
      <button id="btn-settings" am-mod="button" am-align="right" title="Settings">
        <svg am-mod="icon">
          <use xlink:href="#settings"/>
        </svg>
      </button>
    </div>
  </nav>
  <div id="modal" am-mod="popup" am-type="modal">
    <div am-popup="overlay"></div>
    <div am-popup="menu">
      <h2 am-mod="header" am-type="form" am-render="block">Settings</h2>
      <div am-mod="form">
        <h3 am-mod="header" am-type="section">Tempo</h3>
        <div am-mod="input">
          <input id="tempoMin" placeholder="test" name="tempoMin" required="true" format="\d?\d?\d?"/>
          <label for="tempoMin">Minimum</label>
        </div>
        <div am-mod="input">
          <input id="tempoMax" name="tempoMax" required="true" format="\d?\d?\d?"/>
          <label for="tempoMax">Maximum</label>
        </div>
      </div>
      <div am-popup="controls">
          <button id="btn-setting-save" am-mod="button" am-render="flat" am-type="primary">Save</button>
          <button id="btn-setting-cancel" am-mod="button" am-render="flat">Cancel</button>
      </div>
    </div>
  </div>
</body>
</html>